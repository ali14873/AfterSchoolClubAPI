package co.uk.afterschoolclub.userregistration.Club;

import com.opencsv.CSVReader;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class ClubApplicationService {

    @Autowired
    private ClubRepositoryInterface clubRepositoryInterface;

    public ClubDTO createClub(ClubDTO request) {
        ClubTable club = ClubTable.builder()
                .id(request.getId())
                .clubName(request.getClubName())
                .description(request.getDescription())
                .location(request.getLocation())
                .build();
        clubRepositoryInterface.save(club);
        return request;
    }

    public List<ClubDTO> getAllClubs() {
        List<ClubDTO> clubs = new ArrayList<>();
        for (ClubTable club : clubRepositoryInterface.findAll()) {
            ClubDTO dto = ClubDTO.builder()
                    .id(club.getId())
                    .clubName(club.getClubName())
                    .description(club.getDescription())
                    .location(club.getLocation())
                    .build();
            clubs.add(dto);
        }
        return clubs;
    }

    public ClubDTO editClub(UUID id, ClubDTO clubDTO) {
        Optional<ClubTable> clubOptional = clubRepositoryInterface.findById(id);
        if (clubOptional.isEmpty()) {
            throw new EntityNotFoundException("Club not found with ID: " + id);
        }
        ClubTable club = clubOptional.get();
        club.setClubName(clubDTO.getClubName());
        club.setDescription(clubDTO.getDescription());
        club.setLocation(clubDTO.getLocation());
        clubRepositoryInterface.save(club);
        return clubDTO; // Return updated DTO, possibly after re-fetching or updating from the entity
    }

    @Transactional
    public void deleteClub(UUID id) {
        Optional<ClubTable> clubOptional = clubRepositoryInterface.findById(id);
        if (clubOptional.isPresent()) {
            clubRepositoryInterface.delete(clubOptional.get());
        } else {
            throw new EntityNotFoundException("Club not found with ID: " + id);
        }
    }

    public List<ClubDTO> processCSVFile(InputStream inputStream) {
        List<ClubDTO> createdClubs = new ArrayList<>();
        try (Reader reader = new BufferedReader(new InputStreamReader(inputStream))) {
            CSVReader csvReader = new CSVReader(reader);
            String[] nextRecord;
            while ((nextRecord = csvReader.readNext()) != null) {
                ClubDTO clubDTO = ClubDTO.builder()
                        .clubName(nextRecord[0])
                        .description(nextRecord[1])
                        .location(nextRecord[2])
                        .build();
                // Note: The ID is not set here as it's generated by the database upon insertion.
                createdClubs.add(createClub(clubDTO));
            }
        } catch (Exception e) {
            throw new RuntimeException("Error processing CSV file", e);
        }
        return createdClubs;
    }
}
